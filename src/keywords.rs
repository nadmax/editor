pub mod rust {
    pub fn primary_keywords() -> Vec<String> {
        vec![
            "as".to_owned(),
            "break".to_owned(),
            "const".to_owned(),
            "continue".to_owned(),
            "crate".to_owned(),
            "else".to_owned(),
            "enum".to_owned(),
            "extern".to_owned(),
            "false".to_owned(),
            "fn".to_owned(),
            "for".to_owned(),
            "if".to_owned(),
            "impl".to_owned(),
            "in".to_owned(),
            "let".to_owned(),
            "loop".to_owned(),
            "match".to_owned(),
            "mod".to_owned(),
            "move".to_owned(),
            "mut".to_owned(),
            "pub".to_owned(),
            "ref".to_owned(),
            "return".to_owned(),
            "self".to_owned(),
            "Self".to_owned(),
            "static".to_owned(),
            "struct".to_owned(),
            "super".to_owned(),
            "trait".to_owned(),
            "true".to_owned(),
            "true".to_owned(),
            "type".to_owned(),
            "unsafe".to_owned(),
            "use".to_owned(),
            "where".to_owned(),
            "while".to_owned(),
            "dyn".to_owned(),
            "abstract".to_owned(),
            "become".to_owned(),
            "box".to_owned(),
            "do".to_owned(),
            "final".to_owned(),
            "macro".to_owned(),
            "override".to_owned(),
            "priv".to_owned(),
            "typeof".to_owned(),
            "unsized".to_owned(),
            "virtual".to_owned(),
            "yield".to_owned(),
            "async".to_owned(),
            "await".to_owned(),
            "try".to_owned(),
        ]
    }

    pub fn secondary_keywords() -> Vec<String> {
        vec![
            "bool".to_owned(),
            "char".to_owned(),
            "i8".to_owned(),
            "i16".to_owned(),
            "i32".to_owned(),
            "i64".to_owned(),
            "isize".to_owned(),
            "u8".to_owned(),
            "u16".to_owned(),
            "u32".to_owned(),
            "u64".to_owned(),
            "usize".to_owned(),
            "f32".to_owned(),
            "f64".to_owned(),
            "String".to_owned(),
            "&str".to_owned(),
            "Vec".to_owned(),
            "std".to_owned(),
            "core".to_owned(),
            "alloc".to_owned(),
            "Result".to_owned(),
            "Box".to_owned(),
            "Error".to_owned(),
            "Option".to_owned(),
            "Default".to_owned(),
            "Clone".to_owned(),
            "Copy".to_owned(),
            "PartialEq".to_owned(),
            "Debug".to_owned(),
            "Instant".to_owned(),
        ]
    }
}
